snippet if "if block" b
if (${1:/*condition */}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if-else block" b
if (${1:/*condition */}) {
	$2
} else {
	$3
}
endsnippet

snippet elif "else-if block"
else if(${1:/* condition */}) {
	$0
}
endsnippet

snippet else "else block"
else {
	$0
}
endsnippet

snippet for "for loop" b
for (${2:auto} $1 = $3; $4; ${5:++$1}) {
	${VISUAL}$0
}
endsnippet

snippet fore "ranged-based for loop" b
for (${2:const auto} $1 : $3) {
	${VISUAL}$0
}
endsnippet

snippet wh "while loop" b
while (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet do "do while loop" b
do {
	${VISUAL}$0
} while (${1:/* condition */});
endsnippet

snippet ns "namespace" b
namespace $1 {

${VISUAL}$0

} // namespace $1
endsnippet

snippet ans "anonymous namespace" b
namespace {

	${VISUAL}$0

} // anonymous namespace
endsnippet

snippet struct "struct without base" b
struct $1 {
	$0
};
endsnippet

snippet class "class without base" b
class $1 {
public:
	$2
private:
	$3
};
endsnippet

snippet classd "class derived from base" b
class $1 : ${2:public ${3:Base}} {
public:
	$2
private:
	$3
};
endsnippet

snippet pub "public section" b
public:
	$0
endsnippet

snippet priv "private section" b
private:
	$0
endsnippet

snippet hh "header start" b
#pragma once

$0
endsnippet

snippet vec "std::vector of" b
std::vector<$1> $0;
endsnippet

snippet map "std::map<k, v>" b
std::map<${1:Key}, ${2:Value}> $0;
endsnippet

snippet umap "std::unordered_map<k, v>" b
std::unordered_map<${1:Key}, ${2:Value}> $0;
endsnippet

snippet coutl "std::cout a line" b
std::cout << $0 << std::endl;
endsnippet

# vim:ft=snippets:
